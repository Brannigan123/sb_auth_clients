# coding: utf-8

"""
    API for AuthApplication

    Bran's Auth API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from authclient.models.model_date import ModelDate

class OtpRequestResponse(BaseModel):
    """
    OtpRequestResponse
    """
    errored: Optional[StrictBool] = None
    messages: Optional[conlist(StrictStr)] = None
    otp_id: Optional[StrictStr] = Field(None, alias="otpId")
    email: Optional[StrictStr] = None
    expiry_date: Optional[ModelDate] = Field(None, alias="expiryDate")
    __properties = ["errored", "messages", "otpId", "email", "expiryDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OtpRequestResponse:
        """Create an instance of OtpRequestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of expiry_date
        if self.expiry_date:
            _dict['expiryDate'] = self.expiry_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OtpRequestResponse:
        """Create an instance of OtpRequestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OtpRequestResponse.parse_obj(obj)

        _obj = OtpRequestResponse.parse_obj({
            "errored": obj.get("errored"),
            "messages": obj.get("messages"),
            "otp_id": obj.get("otpId"),
            "email": obj.get("email"),
            "expiry_date": ModelDate.from_dict(obj.get("expiryDate")) if obj.get("expiryDate") is not None else None
        })
        return _obj


