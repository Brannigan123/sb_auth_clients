/* tslint:disable */
/* eslint-disable */
/**
 * API for AuthApplication
 * Bran\'s Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../../../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../base';
// @ts-ignore
import { AuthResponse } from '../../../../../com/bran/auth/client/model';
// @ts-ignore
import { ResetUserPasswordRequest } from '../../../../../com/bran/auth/client/model';
/**
 * ResetUserPasswordApi - axios parameter creator
 * @export
 */
export const ResetUserPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ResetUserPasswordRequest} resetUserPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword: async (resetUserPasswordRequest: ResetUserPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetUserPasswordRequest' is not null or undefined
            assertParamExists('resetUserPassword', 'resetUserPasswordRequest', resetUserPasswordRequest)
            const localVarPath = `/api/v1/auth/public/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetUserPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResetUserPasswordApi - functional programming interface
 * @export
 */
export const ResetUserPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResetUserPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ResetUserPasswordRequest} resetUserPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetUserPassword(resetUserPasswordRequest: ResetUserPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetUserPassword(resetUserPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResetUserPasswordApi - factory interface
 * @export
 */
export const ResetUserPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResetUserPasswordApiFp(configuration)
    return {
        /**
         * 
         * @param {ResetUserPasswordRequest} resetUserPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword(resetUserPasswordRequest: ResetUserPasswordRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.resetUserPassword(resetUserPasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResetUserPasswordApi - object-oriented interface
 * @export
 * @class ResetUserPasswordApi
 * @extends {BaseAPI}
 */
export class ResetUserPasswordApi extends BaseAPI {
    /**
     * 
     * @param {ResetUserPasswordRequest} resetUserPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetUserPasswordApi
     */
    public resetUserPassword(resetUserPasswordRequest: ResetUserPasswordRequest, options?: AxiosRequestConfig) {
        return ResetUserPasswordApiFp(this.configuration).resetUserPassword(resetUserPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

