/*
API for AuthApplication

Bran's Auth API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authclient

import (
	"encoding/json"
)

// checks if the ResponseUserDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseUserDetails{}

// ResponseUserDetails struct for ResponseUserDetails
type ResponseUserDetails struct {
	UserId *string `json:"userId,omitempty"`
	Username *string `json:"username,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Email *string `json:"email,omitempty"`
	Roles []Role `json:"roles,omitempty"`
	EmailVerified *bool `json:"emailVerified,omitempty"`
	LockedAccount *bool `json:"lockedAccount,omitempty"`
	DeletedAccount *bool `json:"deletedAccount,omitempty"`
}

// NewResponseUserDetails instantiates a new ResponseUserDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseUserDetails() *ResponseUserDetails {
	this := ResponseUserDetails{}
	return &this
}

// NewResponseUserDetailsWithDefaults instantiates a new ResponseUserDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseUserDetailsWithDefaults() *ResponseUserDetails {
	this := ResponseUserDetails{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ResponseUserDetails) SetUserId(v string) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ResponseUserDetails) SetUsername(v string) {
	o.Username = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ResponseUserDetails) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ResponseUserDetails) SetEmail(v string) {
	o.Email = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetRoles() []Role {
	if o == nil || IsNil(o.Roles) {
		var ret []Role
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *ResponseUserDetails) SetRoles(v []Role) {
	o.Roles = v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *ResponseUserDetails) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetLockedAccount returns the LockedAccount field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetLockedAccount() bool {
	if o == nil || IsNil(o.LockedAccount) {
		var ret bool
		return ret
	}
	return *o.LockedAccount
}

// GetLockedAccountOk returns a tuple with the LockedAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetLockedAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.LockedAccount) {
		return nil, false
	}
	return o.LockedAccount, true
}

// HasLockedAccount returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasLockedAccount() bool {
	if o != nil && !IsNil(o.LockedAccount) {
		return true
	}

	return false
}

// SetLockedAccount gets a reference to the given bool and assigns it to the LockedAccount field.
func (o *ResponseUserDetails) SetLockedAccount(v bool) {
	o.LockedAccount = &v
}

// GetDeletedAccount returns the DeletedAccount field value if set, zero value otherwise.
func (o *ResponseUserDetails) GetDeletedAccount() bool {
	if o == nil || IsNil(o.DeletedAccount) {
		var ret bool
		return ret
	}
	return *o.DeletedAccount
}

// GetDeletedAccountOk returns a tuple with the DeletedAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseUserDetails) GetDeletedAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.DeletedAccount) {
		return nil, false
	}
	return o.DeletedAccount, true
}

// HasDeletedAccount returns a boolean if a field has been set.
func (o *ResponseUserDetails) HasDeletedAccount() bool {
	if o != nil && !IsNil(o.DeletedAccount) {
		return true
	}

	return false
}

// SetDeletedAccount gets a reference to the given bool and assigns it to the DeletedAccount field.
func (o *ResponseUserDetails) SetDeletedAccount(v bool) {
	o.DeletedAccount = &v
}

func (o ResponseUserDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseUserDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.EmailVerified) {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if !IsNil(o.LockedAccount) {
		toSerialize["lockedAccount"] = o.LockedAccount
	}
	if !IsNil(o.DeletedAccount) {
		toSerialize["deletedAccount"] = o.DeletedAccount
	}
	return toSerialize, nil
}

type NullableResponseUserDetails struct {
	value *ResponseUserDetails
	isSet bool
}

func (v NullableResponseUserDetails) Get() *ResponseUserDetails {
	return v.value
}

func (v *NullableResponseUserDetails) Set(val *ResponseUserDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseUserDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseUserDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseUserDetails(val *ResponseUserDetails) *NullableResponseUserDetails {
	return &NullableResponseUserDetails{value: val, isSet: true}
}

func (v NullableResponseUserDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseUserDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


