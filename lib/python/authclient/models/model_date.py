# coding: utf-8

"""
    API for AuthApplication

    Bran's Auth API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class ModelDate(BaseModel):
    """
    ModelDate
    """
    time: Optional[StrictInt] = None
    year: Optional[StrictInt] = None
    seconds: Optional[StrictInt] = None
    month: Optional[StrictInt] = None
    var_date: Optional[StrictInt] = Field(None, alias="date")
    hours: Optional[StrictInt] = None
    minutes: Optional[StrictInt] = None
    day: Optional[StrictInt] = None
    timezone_offset: Optional[StrictInt] = Field(None, alias="timezoneOffset")
    __properties = ["time", "year", "seconds", "month", "date", "hours", "minutes", "day", "timezoneOffset"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelDate:
        """Create an instance of ModelDate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelDate:
        """Create an instance of ModelDate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelDate.parse_obj(obj)

        _obj = ModelDate.parse_obj({
            "time": obj.get("time"),
            "year": obj.get("year"),
            "seconds": obj.get("seconds"),
            "month": obj.get("month"),
            "var_date": obj.get("date"),
            "hours": obj.get("hours"),
            "minutes": obj.get("minutes"),
            "day": obj.get("day"),
            "timezone_offset": obj.get("timezoneOffset")
        })
        return _obj


